{
	"info": {
		"_postman_id": "b081d3c3-cc60-4ce3-b26b-79893fc6bc8b",
		"name": "SpringBoot_REST",
		"description": "This project demonstrates the implementation of REST APIs in **Spring Boot** for managing book-related data. The following API endpoints enable you to perform CRUD operations (Create, Read, Update, Delete) on book data, as well as file handling functionality for managing additional files related to books.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40033324"
	},
	"item": [
		{
			"name": "Save One Book",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8086/api/savebook",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8086",
					"path": [
						"api",
						"savebook"
					]
				},
				"description": "Adds a new book record to the system. The user provides book details, and the system saves them in the database."
			},
			"response": []
		},
		{
			"name": "FileHandling",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "myfile",
							"type": "file",
							"src": "/C:/Users/snmor/Downloads/output3.jpg"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8088/api/uploadfile",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8088",
					"path": [
						"api",
						"uploadfile"
					]
				},
				"description": "Handles file uploads. The user uploads a file, and the system processes and stores it accordingly."
			},
			"response": []
		},
		{
			"name": "Save Multiple Books",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8086/api/savebooks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8086",
					"path": [
						"api",
						"savebooks"
					]
				},
				"description": "Adds multiple book records to the system. The user provides multiple book details, and the system saves them in the database."
			},
			"response": []
		},
		{
			"name": "Get Book by ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8086/api/getbook/id/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8086",
					"path": [
						"api",
						"getbook",
						"id",
						"4"
					]
				},
				"description": "Retrieves a book record by its unique ID. The user provides a book ID, and the system returns the details of the book with that ID."
			},
			"response": []
		},
		{
			"name": "Get Book by Name",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8086/api/getbook/name/fourth book",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8086",
					"path": [
						"api",
						"getbook",
						"name",
						"fourth book"
					]
				},
				"description": "Retrieves a book record by its name. The user provides a book name, and the system returns the details of the book with that name."
			},
			"response": []
		},
		{
			"name": "Get All Books",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8086/api/getbooks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8086",
					"path": [
						"api",
						"getbooks"
					]
				},
				"description": "Retrieves all the book records from the system. The user requests all available books, and the system returns a list of books."
			},
			"response": []
		},
		{
			"name": "Update Book By ID",
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:8086/api/updatebook/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8086",
					"path": [
						"api",
						"updatebook",
						"3"
					]
				},
				"description": "Updates the details of an existing book record by its unique ID. The user provides new book details, and the system updates the book with the specified ID."
			},
			"response": []
		},
		{
			"name": "Delete all Books",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8086/api/deletebooks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8086",
					"path": [
						"api",
						"deletebooks"
					]
				},
				"description": "Deletes all the book records from the system. The user requests to delete all books, and the system removes all records from the database."
			},
			"response": []
		},
		{
			"name": "Delete Book by ID",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8086/api/deletebook/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8086",
					"path": [
						"api",
						"deletebook",
						"3"
					]
				},
				"description": "Deletes a book record by its unique ID. The user provides a book ID, and the system removes the book with that ID from the database."
			},
			"response": []
		}
	]
}